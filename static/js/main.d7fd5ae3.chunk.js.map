{"version":3,"sources":["redux/actions.js","redux/reducer.js","redux/store.js","Components/ContactList.js","Components/Filter.js","Components/addForm.js","App.js","index.js"],"names":["addContact","createAction","deleteContact","changeFilter","contactsReducer","createReducer","actions","state","payload","filter","contact","id","filterReducer","_","complexContactsReducer","combineReducers","contacts","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","phonebook","persistReducer","devTools","process","persistor","persistStore","connect","dispatch","action","className","normalizeFilter","toLowerCase","name","includes","getfiltredContacts","map","number","type","onClick","value","onChange","e","currentTarget","Form","updateContacts","preventDefault","checkDuplicates","alert","newContact","shortid","generate","props","reset","changeHadler","setState","this","onSubmit","pattern","title","required","Component","App","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.d7fd5ae3.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const addContact = createAction('contacts/add');\r\nexport const deleteContact = createAction('contacts/delete');\r\nexport const changeFilter = createAction('contacts/cahngeFilter');\r\n","import { combineReducers } from 'redux';\r\n\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport * as actions from './actions';\r\n\r\nconst contactsReducer = createReducer([], {\r\n   [actions.addContact]: (state, { payload }) => [...state, payload],\r\n   [actions.deleteContact]: (state, { payload }) =>\r\n      state.filter(contact => contact.id !== payload),\r\n});\r\nconst filterReducer = createReducer('', {\r\n   [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst complexContactsReducer = combineReducers({\r\n   contacts: contactsReducer,\r\n   filter: filterReducer,\r\n});\r\n\r\nexport default complexContactsReducer;\r\n","import {\r\n   persistStore,\r\n   persistReducer,\r\n   FLUSH,\r\n   REHYDRATE,\r\n   PAUSE,\r\n   PERSIST,\r\n   PURGE,\r\n   REGISTER,\r\n} from 'redux-persist'; //store.file.js\r\nimport storage from 'redux-persist/lib/storage';\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport complexContactsReducer from './reducer';\r\n\r\nconst middleware = [\r\n   ...getDefaultMiddleware({\r\n      serializableCheck: {\r\n         ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n   }),\r\n];\r\n\r\nconst contactsPersistConfig = {\r\n   key: 'contacts',\r\n   storage,\r\n   blacklist: ['filter'],\r\n};\r\n\r\nexport const store = configureStore({\r\n   reducer: {\r\n      phonebook: persistReducer(contactsPersistConfig, complexContactsReducer),\r\n   },\r\n   middleware,\r\n   devTools: process.env.NODE_ENV === 'development',\r\n});\r\nexport const persistor = persistStore(store);\r\n","import { connect } from 'react-redux';\r\nimport * as action from '../redux/actions';\r\n\r\nconst ContactList = ({ contacts, filter, deleteContact }) => {\r\n   const getfiltredContacts = () => {\r\n      const normalizeFilter = filter.toLowerCase();\r\n      return contacts.filter(contact =>\r\n         contact.name.toLowerCase().includes(normalizeFilter),\r\n      );\r\n   };\r\n   return (\r\n      <ul className=\"phonebook__list\">\r\n         {getfiltredContacts().map(contact => (\r\n            <li key={contact.id} className=\"pnonebook__listItem\">\r\n               <p>\r\n                  {contact.name} : {contact.number}\r\n               </p>\r\n               <button type=\"button\" onClick={() => deleteContact(contact.id)}>\r\n                  Delete contact\r\n               </button>\r\n            </li>\r\n         ))}\r\n      </ul>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n   return {\r\n      contacts: state.phonebook.contacts,\r\n      filter: state.phonebook.filter,\r\n   };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n   return {\r\n      deleteContact: id => dispatch(action.deleteContact(id)),\r\n   };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import { connect } from 'react-redux';\r\nimport * as action from '../redux/actions';\r\n\r\nconst Filter = ({ value, changeFilter }) => {\r\n   return (\r\n      <label className=\"phonebook__filter\">\r\n         Find contacts by name\r\n         <input\r\n            type=\"text\"\r\n            value={value}\r\n            onChange={e => changeFilter(e.currentTarget.value)}\r\n         />\r\n      </label>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n   return {\r\n      value: state.phonebook.filter,\r\n   };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n   return {\r\n      changeFilter: value => dispatch(action.changeFilter(value)),\r\n   };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport * as action from '../redux/actions';\r\nimport shortid from 'shortid';\r\n\r\nclass Form extends Component {\r\n   state = {\r\n      name: '',\r\n      number: '',\r\n   };\r\n\r\n   updateContacts = e => {\r\n      e.preventDefault();\r\n      const { name, number } = this.state;\r\n      if (this.checkDuplicates(name)) {\r\n         alert(`${name} уже в списке`);\r\n         return;\r\n      }\r\n      const newContact = {\r\n         name,\r\n         number,\r\n         id: shortid.generate(),\r\n      };\r\n      this.props.addContact(newContact);\r\n      this.reset();\r\n   };\r\n\r\n   checkDuplicates = name => {\r\n      const currentContactsName = this.props.contacts.map(\r\n         contact => contact.name,\r\n      );\r\n      return currentContactsName.includes(name);\r\n   };\r\n\r\n   changeHadler = e => {\r\n      this.setState({ [e.currentTarget.name]: e.currentTarget.value });\r\n   };\r\n   reset() {\r\n      this.setState({ name: '', number: '' });\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <form onSubmit={this.updateContacts} className=\"phonebook_form\">\r\n            <div className=\"phonebook__inputarea\">\r\n               <label>\r\n                  <h2>Name</h2>\r\n                  <input\r\n                     value={this.state.name}\r\n                     type=\"text\"\r\n                     name=\"name\"\r\n                     onChange={this.changeHadler}\r\n                     pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                     title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                     required\r\n                  />\r\n               </label>\r\n\r\n               <label>\r\n                  <h2>Number</h2>\r\n                  <input\r\n                     value={this.state.number}\r\n                     type=\"tel\"\r\n                     name=\"number\"\r\n                     onChange={this.changeHadler}\r\n                     pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n                     title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n                     required\r\n                  />\r\n               </label>\r\n            </div>\r\n            <button type=\"submit\" className=\"phonebook__addButton\">\r\n               Add contact\r\n            </button>\r\n         </form>\r\n      );\r\n   }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n   return {\r\n      contacts: state.phonebook.contacts,\r\n   };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n   return {\r\n      addContact: newContact => dispatch(action.addContact(newContact)),\r\n   };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\r\n","import ContactList from './Components/ContactList';\r\nimport Filter from './Components/Filter';\r\nimport Form from './Components/addForm';\r\nimport './Components/styles.css';\r\n\r\nconst App = () => {\r\n   return (\r\n      <div className=\"phonebook\">\r\n         <h1 className=\"phonebook__titel\"> Phonebook</h1>\r\n         <Form />\r\n         <h2> Contacts List</h2>\r\n         <Filter />\r\n         <ContactList />\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { Provider } from 'react-redux';\nimport * as store from './redux/store';\nimport App from './App';\n\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n   <React.StrictMode>\n      <Provider store={store.store}>\n         <PersistGate loading={null} persistor={store.persistor}>\n            <App />\n         </PersistGate>\n      </Provider>\n   </React.StrictMode>,\n   document.getElementById('root'),\n);\n"],"sourceRoot":""}